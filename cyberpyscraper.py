# -*- coding: utf-8 -*-
"""cyberpyscraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z69AfbkRiS-Iu6cWDkJvp3JDi7xww3RP
"""

# -*- coding: utf-8 -*-
"""remotepyscraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C1zM_vWTKKQhHUDi97BtH_Fdrq6fZZJl
"""

# @title Default title text
!pip install httpx parsel pandas
import httpx
from parsel import Selector
import pandas as pd
import json

url = "https://jobs-search-api.p.rapidapi.com/getjobs"

payload = {
	"search_term": "web",
	"location": "mumbai",
	"results_wanted": 5,
	"site_name": ["indeed", "linkedin", "zip_recruiter", "glassdoor"],
	"distance": 50,
	"job_type": "fulltime",
	"is_remote": False,
	"linkedin_fetch_description": False,
	"hours_old": 72
}
headers = {
	"x-rapidapi-key": "API-KEY",
	"x-rapidapi-host": "jobs-search-api.p.rapidapi.com",
	"Content-Type": "application/json"
}

# Fetch the job listings page
response = httpx.get("https://www.remotepython.com/jobs/")
assert response.status_code == 200

# Parse HTML content
selector = Selector(text=response.text)
jobs = []

for job in selector.css('.box-list .item'):
    title = job.css('h3 a::text').get()
    relative_url = job.css('h3 a::attr(href)').get()
    full_url = response.url.join(relative_url)
    snippet = job.css('div p::text').get() or "No description available"

    # Assuming keywords to determine experience level and remote/onsite
    if "entry-level" in snippet.lower() or "less than 2 years" in snippet.lower():
        experience = "Entry-level"
    else:
        experience = "N/A"

    if "remote" in snippet.lower():
        job_type = "Remote"
    else:
        job_type = "On-site"

    jobs.append({
        "Job Title": title,
        "URL": str(full_url), # Convert URL object to string
        "Experience": experience,
        "Job Type": job_type,
        "Description": snippet
    })

# Set the save location for CSV, Excel, and JSON
save_path = r'C:\Users\81sig\Documents'

# Export data to CSV
df = pd.DataFrame(jobs)
df.to_csv(f'{save_path}\\cyber_jobs.csv', index=False)

# Export data to Excel
df.to_excel(f'{save_path}\\cyber_jobs.xlsx', index=False)

# Export data to JSON
with open(f'{save_path}\\cyber_jobs.json', 'w') as json_file:
    json.dump(jobs, json_file, indent=4)

print("Data exported to cyber_jobs.csv, cyber_jobs.xlsx, and cyber_jobs.json in C")

